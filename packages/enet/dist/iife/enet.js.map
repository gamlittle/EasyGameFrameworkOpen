{"version":3,"file":"enet.js","sources":["../../src/default-net-event-handler.ts","../../src/pkg-type.ts","../../src/socketStateType.ts","../../src/wsocket.ts","../../src/net-node.ts"],"sourcesContent":["export class DefaultNetEventHandler implements enet.INetEventHandler {\r\n    onStartConnenct?(connectOpt: enet.IConnectOptions): void {\r\n        console.log(`start connect:${connectOpt.url},opt:`, connectOpt);\r\n    }\r\n    onConnectEnd?(connectOpt: enet.IConnectOptions, handshakeRes?: any): void {\r\n        console.log(`connect ok:${connectOpt.url},opt:`, connectOpt);\r\n        console.log(`handshakeRes:`, handshakeRes);\r\n    }\r\n    onError(event: any, connectOpt: enet.IConnectOptions): void {\r\n        console.error(`socket error,opt:`, connectOpt);\r\n        console.error(event);\r\n    }\r\n    onClosed(event: any, connectOpt: enet.IConnectOptions): void {\r\n        console.error(`socket close,opt:`, connectOpt);\r\n        console.error(event);\r\n    }\r\n    onStartReconnect?(reConnectCfg: enet.IReconnectConfig, connectOpt: enet.IConnectOptions): void {\r\n        console.log(`start reconnect:${connectOpt.url},opt:`, connectOpt);\r\n    }\r\n    onReconnecting?(curCount: number, reConnectCfg: enet.IReconnectConfig, connectOpt: enet.IConnectOptions): void {\r\n        console.log(\r\n            `url:${connectOpt.url} reconnect count:${curCount},less count:${reConnectCfg.reconnectCount},opt:`,\r\n            connectOpt\r\n        );\r\n    }\r\n    onReconnectEnd?(isOk: boolean, reConnectCfg: enet.IReconnectConfig, connectOpt: enet.IConnectOptions): void {\r\n        console.log(`url:${connectOpt.url}reconnect end ${isOk ? \"ok\" : \"fail\"} ,opt:`, connectOpt);\r\n    }\r\n    onStartRequest?(reqCfg: enet.IRequestConfig, connectOpt: enet.IConnectOptions): void {\r\n        console.log(`start request:${reqCfg.protoKey},id:${reqCfg.reqId},opt:`, connectOpt);\r\n        console.log(`reqCfg:`, reqCfg);\r\n    }\r\n    onData?(dpkg: enet.IDecodePackage<any>, connectOpt: enet.IConnectOptions): void {\r\n        console.log(`data :${dpkg.key},opt:`, connectOpt);\r\n    }\r\n    onRequestTimeout?(reqCfg: enet.IRequestConfig, connectOpt: enet.IConnectOptions): void {\r\n        console.warn(`request timeout:${reqCfg.protoKey},opt:`, connectOpt);\r\n    }\r\n    onCustomError?(dpkg: enet.IDecodePackage<any>, connectOpt: enet.IConnectOptions): void {\r\n        console.error(\r\n            `proto key:${dpkg.key},reqId:${dpkg.reqId},code:${dpkg.code},errorMsg:${dpkg.errorMsg},opt:`,\r\n            connectOpt\r\n        );\r\n    }\r\n    onKick(dpkg: enet.IDecodePackage<any>, copt: enet.IConnectOptions) {\r\n        console.log(`be kick,opt:`, copt);\r\n    }\r\n}\r\n","export enum PackageType {\r\n    /**握手 */\r\n    HANDSHAKE = 1,\r\n    /**握手回应 */\r\n    HANDSHAKE_ACK = 2,\r\n    /**心跳 */\r\n    HEARTBEAT = 3,\r\n    /**数据 */\r\n    DATA = 4,\r\n    /**踢下线 */\r\n    KICK = 5\r\n}","export enum SocketState {\r\n    /**连接中 */\r\n    CONNECTING,\r\n    /**打开 */\r\n    OPEN,\r\n    /**关闭中 */\r\n    CLOSING,\r\n    /**关闭了 */\r\n    CLOSED\r\n}","import { SocketState } from \"./socketStateType\";\r\n\r\nexport class WSocket implements enet.ISocket {\r\n    private _sk: WebSocket;\r\n    private _eventHandler: enet.ISocketEventHandler;\r\n    public get state(): SocketState {\r\n        return this._sk ? this._sk.readyState : SocketState.CLOSED;\r\n    }\r\n    public get isConnected(): boolean {\r\n        return this._sk ? this._sk.readyState === SocketState.OPEN : false;\r\n    }\r\n    setEventHandler(handler: enet.ISocketEventHandler): void {\r\n        this._eventHandler = handler;\r\n    }\r\n    connect(opt: enet.IConnectOptions): boolean {\r\n        let url = opt.url;\r\n        if (!url) {\r\n            if (opt.host && opt.port) {\r\n                url = `${opt.protocol ? \"wss\" : \"ws\"}://${opt.host}:${opt.port}`;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        opt.url = url;\r\n        if (this._sk) {\r\n            this.close(true);\r\n        }\r\n        if (!this._sk) {\r\n            this._sk = new WebSocket(url);\r\n            if (!opt.binaryType) {\r\n                opt.binaryType = \"arraybuffer\";\r\n            }\r\n            this._sk.binaryType = opt.binaryType;\r\n            this._sk.onclose = this._eventHandler?.onSocketClosed && this._eventHandler?.onSocketClosed;\r\n            this._sk.onerror = this._eventHandler?.onSocketError && this._eventHandler?.onSocketError;\r\n            this._sk.onmessage = this._eventHandler?.onSocketMsg && this._eventHandler?.onSocketMsg;\r\n            this._sk.onopen = this._eventHandler?.onSocketConnected && this._eventHandler?.onSocketConnected;\r\n        }\r\n    }\r\n    send(data: enet.NetData): void {\r\n        if (this._sk) {\r\n            this._sk.send(data);\r\n        } else {\r\n            console.error(`socket is null`);\r\n        }\r\n    }\r\n\r\n    close(disconnect?: boolean): void {\r\n        if (this._sk) {\r\n            const isConnected = this.isConnected;\r\n            this._sk.close();\r\n            this._sk.onclose = null;\r\n            this._sk.onerror = null;\r\n            this._sk.onmessage = null;\r\n            this._sk.onopen = null;\r\n            this._sk = null;\r\n            if (isConnected) {\r\n                this._eventHandler?.onSocketClosed && this._eventHandler?.onSocketClosed(disconnect);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { DefaultNetEventHandler } from \"./default-net-event-handler\";\r\nimport { PackageType } from \"./pkg-type\";\r\nimport { SocketState } from \"./socketStateType\";\r\nimport { WSocket } from \"./wsocket\";\r\n\r\nexport class NetNode<ProtoKeyType> implements enet.INode<ProtoKeyType> {\r\n    /**\r\n     * 套接字实现\r\n     */\r\n    protected _socket: enet.ISocket;\r\n    public get socket(): enet.ISocket {\r\n        return this._socket;\r\n    }\r\n    /**\r\n     * 网络事件处理器\r\n     */\r\n    protected _netEventHandler: enet.INetEventHandler;\r\n    public get netEventHandler(): enet.INetEventHandler<any> {\r\n        return this._netEventHandler;\r\n    }\r\n    /**\r\n     * 协议处理器\r\n     */\r\n    protected _protoHandler: enet.IProtoHandler;\r\n    public get protoHandler(): enet.IProtoHandler<any> {\r\n        return this._protoHandler;\r\n    }\r\n    /**\r\n     * 当前重连次数\r\n     */\r\n    protected _curReconnectCount: number = 0;\r\n    /**\r\n     * 重连配置\r\n     */\r\n    protected _reConnectCfg: enet.IReconnectConfig;\r\n    /**\r\n     * 是否初始化\r\n     */\r\n    protected _inited: boolean;\r\n    /**\r\n     * 连接参数对象\r\n     */\r\n    protected _connectOpt: enet.IConnectOptions;\r\n    /**\r\n     * 是否正在重连\r\n     */\r\n    protected _isReconnecting: boolean;\r\n    /**\r\n     * 计时器id\r\n     */\r\n    protected _reconnectTimerId: any;\r\n    /**\r\n     * 请求id\r\n     * 会自增\r\n     */\r\n    protected _reqId: number = 1;\r\n    /**\r\n     * 永久监听处理器字典\r\n     * key为请求key  = protoKey\r\n     * value为 回调处理器或回调函数\r\n     */\r\n    protected _pushHandlerMap: { [key: string]: enet.AnyCallback[] };\r\n    /**\r\n     * 一次监听推送处理器字典\r\n     * key为请求key  = protoKey\r\n     * value为 回调处理器或回调函数\r\n     */\r\n    protected _oncePushHandlerMap: { [key: string]: enet.AnyCallback[] };\r\n    /**\r\n     * 请求响应回调字典\r\n     * key为请求key  = protoKey_reqId\r\n     * value为 回调处理器或回调函数\r\n     */\r\n    protected _reqCfgMap: { [key: number]: enet.IRequestConfig };\r\n    /**socket事件处理器 */\r\n    protected _socketEventHandler: enet.ISocketEventHandler;\r\n\r\n    /**\r\n     * 获取socket事件处理器\r\n     */\r\n    protected get socketEventHandler(): enet.ISocketEventHandler {\r\n        if (!this._socketEventHandler) {\r\n            this._socketEventHandler = {\r\n                onSocketClosed: this._onSocketClosed.bind(this),\r\n                onSocketConnected: this._onSocketConnected.bind(this),\r\n                onSocketError: this._onSocketError.bind(this),\r\n                onSocketMsg: this._onSocketMsg.bind(this)\r\n            };\r\n        }\r\n\r\n        return this._socketEventHandler;\r\n    }\r\n    /**数据包类型处理 */\r\n    protected _pkgTypeHandlers: { [key: number]: (dpkg: enet.IDecodePackage) => void };\r\n    /**心跳配置 */\r\n    protected _heartbeatConfig: enet.IHeartBeatConfig;\r\n    /**心跳间隔阈值 默认100毫秒 */\r\n    protected _gapThreashold: number;\r\n    /**使用加密 */\r\n    protected _useCrypto: boolean;\r\n\r\n    public init(config?: enet.INodeConfig): void {\r\n        if (this._inited) return;\r\n\r\n        this._protoHandler = config && config.protoHandler ? config.protoHandler : new DefaultProtoHandler();\r\n        this._socket = config && config.socket ? config.socket : new WSocket();\r\n        this._netEventHandler =\r\n            config && config.netEventHandler ? config.netEventHandler : new DefaultNetEventHandler();\r\n        this._pushHandlerMap = {};\r\n        this._oncePushHandlerMap = {};\r\n        this._reqCfgMap = {};\r\n        const reConnectCfg = config && config.reConnectCfg;\r\n        if (!reConnectCfg) {\r\n            this._reConnectCfg = {\r\n                reconnectCount: 4,\r\n                connectTimeout: 60000\r\n            };\r\n        } else {\r\n            this._reConnectCfg = reConnectCfg;\r\n            if (isNaN(reConnectCfg.reconnectCount)) {\r\n                this._reConnectCfg.reconnectCount = 4;\r\n            }\r\n            if (isNaN(reConnectCfg.connectTimeout)) {\r\n                this._reConnectCfg.connectTimeout = 60000;\r\n            }\r\n        }\r\n        this._gapThreashold = config && !isNaN(config.heartbeatGapThreashold) ? config.heartbeatGapThreashold : 100;\r\n        this._useCrypto = config && config.useCrypto;\r\n        this._inited = true;\r\n\r\n        this._socket.setEventHandler(this.socketEventHandler);\r\n\r\n        this._pkgTypeHandlers = {};\r\n        this._pkgTypeHandlers[PackageType.HANDSHAKE] = this._onHandshake.bind(this);\r\n        this._pkgTypeHandlers[PackageType.HEARTBEAT] = this._heartbeat.bind(this);\r\n        this._pkgTypeHandlers[PackageType.DATA] = this._onData.bind(this);\r\n        this._pkgTypeHandlers[PackageType.KICK] = this._onKick.bind(this);\r\n    }\r\n\r\n    public connect(option: string | enet.IConnectOptions, connectEnd?: VoidFunction): void {\r\n        const socket = this._socket;\r\n        const socketInCloseState =\r\n            socket && (socket.state === SocketState.CLOSING || socket.state === SocketState.CLOSED);\r\n        if (this._inited && socketInCloseState) {\r\n            if (typeof option === \"string\") {\r\n                option = {\r\n                    url: option,\r\n                    connectEnd: connectEnd\r\n                };\r\n            }\r\n            if (connectEnd) {\r\n                option.connectEnd = connectEnd;\r\n            }\r\n            this._connectOpt = option;\r\n\r\n            this._socket.connect(option);\r\n            const netEventHandler = this._netEventHandler;\r\n            netEventHandler.onStartConnenct && netEventHandler.onStartConnenct(option);\r\n        } else {\r\n            console.error(`is not inited${socket ? \" , socket state\" + socket.state : \"\"}`);\r\n        }\r\n    }\r\n    public disConnect(): void {\r\n        this._socket.close(true);\r\n\r\n        //清理心跳定时器\r\n        if (this._heartbeatTimeId) {\r\n            clearTimeout(this._heartbeatTimeId);\r\n            this._heartbeatTimeId = undefined;\r\n        }\r\n        if (this._heartbeatTimeoutId) {\r\n            clearTimeout(this._heartbeatTimeoutId);\r\n            this._heartbeatTimeoutId = undefined;\r\n        }\r\n    }\r\n\r\n    public reConnect(): void {\r\n        if (!this._inited || !this._socket) {\r\n            return;\r\n        }\r\n        if (this._curReconnectCount > this._reConnectCfg.reconnectCount) {\r\n            this._stopReconnect(false);\r\n            return;\r\n        }\r\n        if (!this._isReconnecting) {\r\n            const netEventHandler = this._netEventHandler;\r\n            netEventHandler.onStartReconnect && netEventHandler.onStartReconnect(this._reConnectCfg, this._connectOpt);\r\n        }\r\n        this._isReconnecting = true;\r\n        this.connect(this._connectOpt);\r\n\r\n        this._curReconnectCount++;\r\n        const netEventHandler = this._netEventHandler;\r\n        netEventHandler.onReconnecting &&\r\n            netEventHandler.onReconnecting(this._curReconnectCount, this._reConnectCfg, this._connectOpt);\r\n        this._reconnectTimerId = setTimeout(() => {\r\n            this.reConnect();\r\n        }, this._reConnectCfg.connectTimeout);\r\n    }\r\n    public request<ReqData = any, ResData = any>(\r\n        protoKey: ProtoKeyType,\r\n        data: ReqData,\r\n        resHandler:\r\n            | enet.ICallbackHandler<enet.IDecodePackage<ResData>>\r\n            | enet.ValueCallback<enet.IDecodePackage<ResData>>,\r\n        arg?: any\r\n    ): void {\r\n        if (!this._isSocketReady()) return;\r\n        const reqId = this._reqId;\r\n        const protoHandler = this._protoHandler;\r\n        const encodePkg = protoHandler.encodeMsg({ key: protoKey, reqId: reqId, data: data }, this._useCrypto);\r\n        if (encodePkg) {\r\n            let reqCfg: enet.IRequestConfig = {\r\n                reqId: reqId,\r\n                protoKey: protoHandler.protoKey2Key(protoKey),\r\n                data: data,\r\n                resHandler: resHandler\r\n            };\r\n            if (arg) reqCfg = Object.assign(reqCfg, arg);\r\n            this._reqCfgMap[reqId] = reqCfg;\r\n            this._reqId++;\r\n            this._netEventHandler.onStartRequest && this._netEventHandler.onStartRequest(reqCfg, this._connectOpt);\r\n            this.send(encodePkg);\r\n        }\r\n    }\r\n    public notify<T>(protoKey: ProtoKeyType, data?: T): void {\r\n        if (!this._isSocketReady()) return;\r\n\r\n        const encodePkg = this._protoHandler.encodeMsg(\r\n            {\r\n                key: protoKey,\r\n                data: data\r\n            } as enet.IMessage,\r\n            this._useCrypto\r\n        );\r\n\r\n        this.send(encodePkg);\r\n    }\r\n    public send(netData: enet.NetData): void {\r\n        this._socket.send(netData);\r\n    }\r\n    public onPush<ResData = any>(\r\n        protoKey: ProtoKeyType,\r\n        handler: enet.ICallbackHandler<enet.IDecodePackage<ResData>> | enet.ValueCallback<enet.IDecodePackage<ResData>>\r\n    ): void {\r\n        const key = this._protoHandler.protoKey2Key(protoKey);\r\n        if (!this._pushHandlerMap[key]) {\r\n            this._pushHandlerMap[key] = [handler];\r\n        } else {\r\n            this._pushHandlerMap[key].push(handler);\r\n        }\r\n    }\r\n    public oncePush<ResData = any>(\r\n        protoKey: ProtoKeyType,\r\n        handler: enet.ICallbackHandler<enet.IDecodePackage<ResData>> | enet.ValueCallback<enet.IDecodePackage<ResData>>\r\n    ): void {\r\n        const key = this._protoHandler.protoKey2Key(protoKey);\r\n        if (!this._oncePushHandlerMap[key]) {\r\n            this._oncePushHandlerMap[key] = [handler];\r\n        } else {\r\n            this._oncePushHandlerMap[key].push(handler);\r\n        }\r\n    }\r\n    public offPush(protoKey: ProtoKeyType, callbackHandler: enet.AnyCallback, context?: any, onceOnly?: boolean): void {\r\n        const key = this._protoHandler.protoKey2Key(protoKey);\r\n        let handlers: enet.AnyCallback[];\r\n        if (onceOnly) {\r\n            handlers = this._oncePushHandlerMap[key];\r\n        } else {\r\n            handlers = this._pushHandlerMap[key];\r\n        }\r\n        if (handlers) {\r\n            let handler: enet.AnyCallback;\r\n            let isEqual: boolean;\r\n            for (let i = handlers.length - 1; i > -1; i--) {\r\n                handler = handlers[i];\r\n                isEqual = false;\r\n                if (typeof handler === \"function\" && handler === callbackHandler) {\r\n                    isEqual = true;\r\n                } else if (\r\n                    typeof handler === \"object\" &&\r\n                    handler.method === callbackHandler &&\r\n                    (!context || context === handler.context)\r\n                ) {\r\n                    isEqual = true;\r\n                }\r\n                if (isEqual) {\r\n                    if (i !== handlers.length) {\r\n                        handlers[i] = handlers[handlers.length - 1];\r\n                        handlers[handlers.length - 1] = handler;\r\n                    }\r\n                    handlers.pop();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public offPushAll(protoKey?: ProtoKeyType): void {\r\n        if (protoKey) {\r\n            const key = this._protoHandler.protoKey2Key(protoKey);\r\n            delete this._pushHandlerMap[key];\r\n            delete this._oncePushHandlerMap[key];\r\n        } else {\r\n            this._pushHandlerMap = {};\r\n            this._oncePushHandlerMap = {};\r\n        }\r\n    }\r\n    /**\r\n     * 握手包处理\r\n     * @param dpkg\r\n     */\r\n    protected _onHandshake(dpkg: enet.IDecodePackage) {\r\n        if (dpkg.errorMsg) {\r\n            return;\r\n        }\r\n        this._handshakeInit(dpkg);\r\n        const ackPkg = this._protoHandler.encodePkg({ type: PackageType.HANDSHAKE_ACK });\r\n        this.send(ackPkg);\r\n        const connectOpt = this._connectOpt;\r\n        const handshakeRes = this._protoHandler.handShakeRes;\r\n        connectOpt.connectEnd && connectOpt.connectEnd(handshakeRes);\r\n        this._netEventHandler.onConnectEnd && this._netEventHandler.onConnectEnd(connectOpt, handshakeRes);\r\n    }\r\n    /**\r\n     * 握手初始化\r\n     * @param dpkg\r\n     */\r\n    protected _handshakeInit(dpkg: enet.IDecodePackage) {\r\n        const heartbeatCfg = this.protoHandler.heartbeatConfig;\r\n\r\n        this._heartbeatConfig = heartbeatCfg;\r\n    }\r\n    /**心跳超时定时器id */\r\n    protected _heartbeatTimeoutId: number;\r\n    /**心跳定时器id */\r\n    protected _heartbeatTimeId: number;\r\n    /**最新心跳超时时间 */\r\n    protected _nextHeartbeatTimeoutTime: number;\r\n    /**\r\n     * 心跳包处理\r\n     * @param dpkg\r\n     */\r\n    protected _heartbeat(dpkg: enet.IDecodePackage) {\r\n        const heartbeatCfg = this._heartbeatConfig;\r\n        const protoHandler = this._protoHandler;\r\n        if (!heartbeatCfg || !heartbeatCfg.heartbeatInterval) {\r\n            return;\r\n        }\r\n        if (this._heartbeatTimeoutId) {\r\n            clearTimeout(this._heartbeatTimeoutId);\r\n            this._heartbeatTimeoutId = undefined;\r\n        }\r\n        this._heartbeatTimeId = setTimeout(() => {\r\n            this._heartbeatTimeId = undefined;\r\n            const heartbeatPkg = protoHandler.encodePkg({ type: PackageType.HEARTBEAT }, this._useCrypto);\r\n            this.send(heartbeatPkg);\r\n            this._nextHeartbeatTimeoutTime = Date.now() + heartbeatCfg.heartbeatTimeout;\r\n\r\n            this._heartbeatTimeoutId = setTimeout(\r\n                this._heartbeatTimeoutCb.bind(this),\r\n                heartbeatCfg.heartbeatTimeout\r\n            ) as any;\r\n        }, heartbeatCfg.heartbeatInterval) as any;\r\n    }\r\n    /**\r\n     * 心跳超时处理\r\n     */\r\n    protected _heartbeatTimeoutCb() {\r\n        var gap = this._nextHeartbeatTimeoutTime - Date.now();\r\n        if (gap > this._gapThreashold) {\r\n            this._heartbeatTimeoutId = setTimeout(this._heartbeatTimeoutCb.bind(this), gap) as any;\r\n        } else {\r\n            console.error(\"server heartbeat timeout\");\r\n            this.disConnect();\r\n        }\r\n    }\r\n    /**\r\n     * 数据包处理\r\n     * @param dpkg\r\n     */\r\n    protected _onData(dpkg: enet.IDecodePackage) {\r\n        if (dpkg.errorMsg) {\r\n            return;\r\n        }\r\n        let reqCfg: enet.IRequestConfig;\r\n        if (!isNaN(dpkg.reqId) && dpkg.reqId > 0) {\r\n            //请求\r\n            const reqId = dpkg.reqId;\r\n            reqCfg = this._reqCfgMap[reqId];\r\n            if (!reqCfg) return;\r\n            reqCfg.decodePkg = dpkg;\r\n            this._runHandler(reqCfg.resHandler, dpkg);\r\n        } else {\r\n            const pushKey = dpkg.key;\r\n            //推送\r\n            let handlers = this._pushHandlerMap[pushKey];\r\n            const onceHandlers = this._oncePushHandlerMap[pushKey];\r\n            if (!handlers) {\r\n                handlers = onceHandlers;\r\n            } else if (onceHandlers) {\r\n                handlers = handlers.concat(onceHandlers);\r\n            }\r\n            delete this._oncePushHandlerMap[pushKey];\r\n            if (handlers) {\r\n                for (let i = 0; i < handlers.length; i++) {\r\n                    this._runHandler(handlers[i], dpkg);\r\n                }\r\n            }\r\n        }\r\n        const netEventHandler = this._netEventHandler;\r\n        netEventHandler.onData && netEventHandler.onData(dpkg, this._connectOpt, reqCfg);\r\n    }\r\n    /**\r\n     * 踢下线数据包处理\r\n     * @param dpkg\r\n     */\r\n    protected _onKick(dpkg: enet.IDecodePackage) {\r\n        this._netEventHandler.onKick && this._netEventHandler.onKick(dpkg, this._connectOpt);\r\n    }\r\n    /**\r\n     * socket状态是否准备好\r\n     */\r\n    protected _isSocketReady(): boolean {\r\n        const socket = this._socket;\r\n        const socketIsReady = socket && (socket.state === SocketState.CONNECTING || socket.state === SocketState.OPEN);\r\n        if (this._inited && socketIsReady) {\r\n            return true;\r\n        } else {\r\n            console.error(\r\n                `${\r\n                    this._inited\r\n                        ? socketIsReady\r\n                            ? \"socket is ready\"\r\n                            : \"socket is null or unready\"\r\n                        : \"netNode is unInited\"\r\n                }`\r\n            );\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * 当socket连接成功\r\n     * @param event\r\n     */\r\n    protected _onSocketConnected(event: any): void {\r\n        if (this._isReconnecting) {\r\n            this._stopReconnect();\r\n        } else {\r\n            const handler = this._netEventHandler;\r\n            const connectOpt = this._connectOpt;\r\n            const protoHandler = this._protoHandler;\r\n            if (protoHandler && connectOpt.handShakeReq) {\r\n                const handShakeNetData = protoHandler.encodePkg({\r\n                    type: PackageType.HANDSHAKE,\r\n                    data: connectOpt.handShakeReq\r\n                });\r\n                this.send(handShakeNetData);\r\n            } else {\r\n                connectOpt.connectEnd && connectOpt.connectEnd();\r\n                handler.onConnectEnd && handler.onConnectEnd(connectOpt);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 当socket报错\r\n     * @param event\r\n     */\r\n    protected _onSocketError(event: any): void {\r\n        const eventHandler = this._netEventHandler;\r\n        eventHandler.onError && eventHandler.onError(event, this._connectOpt);\r\n    }\r\n    /**\r\n     * 当socket有消息\r\n     * @param event\r\n     */\r\n    protected _onSocketMsg(event: { data: enet.NetData }) {\r\n        const depackage = this._protoHandler.decodePkg(event.data);\r\n        const netEventHandler = this._netEventHandler;\r\n        const pkgTypeHandler = this._pkgTypeHandlers[depackage.type];\r\n        if (pkgTypeHandler) {\r\n            pkgTypeHandler(depackage);\r\n        } else {\r\n            console.error(`There is no handler of this type:${depackage.type}`);\r\n        }\r\n        if (depackage.errorMsg) {\r\n            netEventHandler.onCustomError && netEventHandler.onCustomError(depackage, this._connectOpt);\r\n        }\r\n        //更新心跳超时时间\r\n        if (this._nextHeartbeatTimeoutTime) {\r\n            this._nextHeartbeatTimeoutTime = Date.now() + this._heartbeatConfig.heartbeatTimeout;\r\n        }\r\n    }\r\n    /**\r\n     * 当socket关闭\r\n     * @param event\r\n     */\r\n    protected _onSocketClosed(event: any): void {\r\n        const netEventHandler = this._netEventHandler;\r\n        if (this._isReconnecting) {\r\n            clearTimeout(this._reconnectTimerId);\r\n            this.reConnect();\r\n        } else {\r\n            netEventHandler.onClosed && netEventHandler.onClosed(event, this._connectOpt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 执行回调，会并接上透传数据\r\n     * @param handler 回调\r\n     * @param depackage 解析完成的数据包\r\n     */\r\n    protected _runHandler(handler: enet.AnyCallback, depackage: enet.IDecodePackage) {\r\n        if (typeof handler === \"function\") {\r\n            handler(depackage);\r\n        } else if (typeof handler === \"object\") {\r\n            handler.method &&\r\n                handler.method.apply(handler.context, handler.args ? [depackage].concat(handler.args) : [depackage]);\r\n        }\r\n    }\r\n    /**\r\n     * 停止重连\r\n     * @param isOk 重连是否成功\r\n     */\r\n    protected _stopReconnect(isOk = true) {\r\n        if (this._isReconnecting) {\r\n            this._isReconnecting = false;\r\n            clearTimeout(this._reconnectTimerId);\r\n            this._curReconnectCount = 0;\r\n            const eventHandler = this._netEventHandler;\r\n            eventHandler.onReconnectEnd && eventHandler.onReconnectEnd(isOk, this._reConnectCfg, this._connectOpt);\r\n        }\r\n    }\r\n}\r\nclass DefaultProtoHandler<ProtoKeyType> implements enet.IProtoHandler<ProtoKeyType> {\r\n    private _heartbeatCfg: enet.IHeartBeatConfig;\r\n    public get handShakeRes(): any {\r\n        return undefined;\r\n    }\r\n    public get heartbeatConfig(): enet.IHeartBeatConfig {\r\n        return this._heartbeatCfg;\r\n    }\r\n    encodePkg(pkg: enet.IPackage<any>, useCrypto?: boolean): enet.NetData {\r\n        return JSON.stringify(pkg);\r\n    }\r\n    protoKey2Key(protoKey: ProtoKeyType): string {\r\n        return protoKey as any;\r\n    }\r\n    encodeMsg<T>(msg: enet.IMessage<T, ProtoKeyType>, useCrypto?: boolean): enet.NetData {\r\n        return JSON.stringify({ type: PackageType.DATA, data: msg } as enet.IPackage);\r\n    }\r\n    decodePkg(data: enet.NetData): enet.IDecodePackage<any> {\r\n        const parsedData: enet.IDecodePackage = JSON.parse(data as string);\r\n        const pkgType = parsedData.type;\r\n\r\n        if (parsedData.type === PackageType.DATA) {\r\n            const msg: enet.IMessage = parsedData.data;\r\n            return {\r\n                key: msg && msg.key,\r\n                type: pkgType,\r\n                data: msg.data,\r\n                reqId: parsedData.data && parsedData.data.reqId\r\n            } as enet.IDecodePackage;\r\n        } else {\r\n            if (pkgType === PackageType.HANDSHAKE) {\r\n                this._heartbeatCfg = parsedData.data;\r\n            }\r\n            return {\r\n                type: pkgType,\r\n                data: parsedData.data\r\n            } as enet.IDecodePackage;\r\n        }\r\n    }\r\n}\r\n"],"names":["PackageType","SocketState"],"mappings":";;;;QAAA;SA+CC;QA9CG,gDAAe,GAAf,UAAiB,UAAgC;YAC7C,OAAO,CAAC,GAAG,CAAC,wBAAiB,UAAU,CAAC,GAAG,UAAO,EAAE,UAAU,CAAC,CAAC;SACnE;QACD,6CAAY,GAAZ,UAAc,UAAgC,EAAE,YAAkB;YAC9D,OAAO,CAAC,GAAG,CAAC,qBAAc,UAAU,CAAC,GAAG,UAAO,EAAE,UAAU,CAAC,CAAC;YAC7D,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;SAC9C;QACD,wCAAO,GAAP,UAAQ,KAAU,EAAE,UAAgC;YAChD,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;YAC/C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACxB;QACD,yCAAQ,GAAR,UAAS,KAAU,EAAE,UAAgC;YACjD,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;YAC/C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACxB;QACD,iDAAgB,GAAhB,UAAkB,YAAmC,EAAE,UAAgC;YACnF,OAAO,CAAC,GAAG,CAAC,0BAAmB,UAAU,CAAC,GAAG,UAAO,EAAE,UAAU,CAAC,CAAC;SACrE;QACD,+CAAc,GAAd,UAAgB,QAAgB,EAAE,YAAmC,EAAE,UAAgC;YACnG,OAAO,CAAC,GAAG,CACP,cAAO,UAAU,CAAC,GAAG,8BAAoB,QAAQ,yBAAe,YAAY,CAAC,cAAc,UAAO,EAClG,UAAU,CACb,CAAC;SACL;QACD,+CAAc,GAAd,UAAgB,IAAa,EAAE,YAAmC,EAAE,UAAgC;YAChG,OAAO,CAAC,GAAG,CAAC,cAAO,UAAU,CAAC,GAAG,2BAAiB,IAAI,GAAG,IAAI,GAAG,MAAM,WAAQ,EAAE,UAAU,CAAC,CAAC;SAC/F;QACD,+CAAc,GAAd,UAAgB,MAA2B,EAAE,UAAgC;YACzE,OAAO,CAAC,GAAG,CAAC,wBAAiB,MAAM,CAAC,QAAQ,iBAAO,MAAM,CAAC,KAAK,UAAO,EAAE,UAAU,CAAC,CAAC;YACpF,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;SAClC;QACD,uCAAM,GAAN,UAAQ,IAA8B,EAAE,UAAgC;YACpE,OAAO,CAAC,GAAG,CAAC,gBAAS,IAAI,CAAC,GAAG,UAAO,EAAE,UAAU,CAAC,CAAC;SACrD;QACD,iDAAgB,GAAhB,UAAkB,MAA2B,EAAE,UAAgC;YAC3E,OAAO,CAAC,IAAI,CAAC,0BAAmB,MAAM,CAAC,QAAQ,UAAO,EAAE,UAAU,CAAC,CAAC;SACvE;QACD,8CAAa,GAAb,UAAe,IAA8B,EAAE,UAAgC;YAC3E,OAAO,CAAC,KAAK,CACT,oBAAa,IAAI,CAAC,GAAG,oBAAU,IAAI,CAAC,KAAK,mBAAS,IAAI,CAAC,IAAI,uBAAa,IAAI,CAAC,QAAQ,UAAO,EAC5F,UAAU,CACb,CAAC;SACL;QACD,uCAAM,GAAN,UAAO,IAA8B,EAAE,IAA0B;YAC7D,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;SACrC;QACL,6BAAC;IAAD,CAAC;;AC/CWA;IAAZ,WAAY,WAAW;QAEnB,uDAAa,CAAA;QAEb,+DAAiB,CAAA;QAEjB,uDAAa,CAAA;QAEb,6CAAQ,CAAA;QAER,6CAAQ,CAAA;IACZ,CAAC,EAXWA,mBAAW,KAAXA,mBAAW;;ACAXC;IAAZ,WAAY,WAAW;QAEnB,yDAAU,CAAA;QAEV,6CAAI,CAAA;QAEJ,mDAAO,CAAA;QAEP,iDAAM,CAAA;IACV,CAAC,EATWA,mBAAW,KAAXA,mBAAW;;;QCEvB;SA2DC;QAxDG,sBAAW,0BAAK;iBAAhB;gBACI,OAAO,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,GAAGA,mBAAW,CAAC,MAAM,CAAC;aAC9D;;;WAAA;QACD,sBAAW,gCAAW;iBAAtB;gBACI,OAAO,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,KAAKA,mBAAW,CAAC,IAAI,GAAG,KAAK,CAAC;aACtE;;;WAAA;QACD,iCAAe,GAAf,UAAgB,OAAiC;YAC7C,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;SAChC;QACD,yBAAO,GAAP,UAAQ,GAAyB;;YAC7B,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;YAClB,IAAI,CAAC,GAAG,EAAE;gBACN,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,EAAE;oBACtB,GAAG,GAAG,UAAG,GAAG,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,gBAAM,GAAG,CAAC,IAAI,cAAI,GAAG,CAAC,IAAI,CAAE,CAAC;iBACpE;qBAAM;oBACH,OAAO,KAAK,CAAC;iBAChB;aACJ;YACD,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;YACd,IAAI,IAAI,CAAC,GAAG,EAAE;gBACV,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACpB;YACD,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBACX,IAAI,CAAC,GAAG,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;gBAC9B,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE;oBACjB,GAAG,CAAC,UAAU,GAAG,aAAa,CAAC;iBAClC;gBACD,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;gBACrC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,cAAc,MAAI,MAAA,IAAI,CAAC,aAAa,0CAAE,cAAc,CAAA,CAAC;gBAC5F,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,aAAa,MAAI,MAAA,IAAI,CAAC,aAAa,0CAAE,aAAa,CAAA,CAAC;gBAC1F,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,WAAW,MAAI,MAAA,IAAI,CAAC,aAAa,0CAAE,WAAW,CAAA,CAAC;gBACxF,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,iBAAiB,MAAI,MAAA,IAAI,CAAC,aAAa,0CAAE,iBAAiB,CAAA,CAAC;aACpG;SACJ;QACD,sBAAI,GAAJ,UAAK,IAAkB;YACnB,IAAI,IAAI,CAAC,GAAG,EAAE;gBACV,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvB;iBAAM;gBACH,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;aACnC;SACJ;QAED,uBAAK,GAAL,UAAM,UAAoB;;YACtB,IAAI,IAAI,CAAC,GAAG,EAAE;gBACV,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;gBACrC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;gBACjB,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC;gBAC1B,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;gBAChB,IAAI,WAAW,EAAE;oBACb,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,cAAc,MAAI,MAAA,IAAI,CAAC,aAAa,0CAAE,cAAc,CAAC,UAAU,CAAC,CAAA,CAAC;iBACxF;aACJ;SACJ;QACL,cAAC;IAAD,CAAC;;;QCxDD;YAyBc,uBAAkB,GAAW,CAAC,CAAC;YAyB/B,WAAM,GAAW,CAAC,CAAC;SA4dhC;QAzgBG,sBAAW,2BAAM;iBAAjB;gBACI,OAAO,IAAI,CAAC,OAAO,CAAC;aACvB;;;WAAA;QAKD,sBAAW,oCAAe;iBAA1B;gBACI,OAAO,IAAI,CAAC,gBAAgB,CAAC;aAChC;;;WAAA;QAKD,sBAAW,iCAAY;iBAAvB;gBACI,OAAO,IAAI,CAAC,aAAa,CAAC;aAC7B;;;WAAA;QAsDD,sBAAc,uCAAkB;iBAAhC;gBACI,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;oBAC3B,IAAI,CAAC,mBAAmB,GAAG;wBACvB,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;wBAC/C,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;wBACrD,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;wBAC7C,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;qBAC5C,CAAC;iBACL;gBAED,OAAO,IAAI,CAAC,mBAAmB,CAAC;aACnC;;;WAAA;QAUM,sBAAI,GAAX,UAAY,MAAyB;YACjC,IAAI,IAAI,CAAC,OAAO;gBAAE,OAAO;YAEzB,IAAI,CAAC,aAAa,GAAG,MAAM,IAAI,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,GAAG,IAAI,mBAAmB,EAAE,CAAC;YACrG,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,OAAO,EAAE,CAAC;YACvE,IAAI,CAAC,gBAAgB;gBACjB,MAAM,IAAI,MAAM,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,GAAG,IAAI,sBAAsB,EAAE,CAAC;YAC7F,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;YAC1B,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;YAC9B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,IAAM,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC;YACnD,IAAI,CAAC,YAAY,EAAE;gBACf,IAAI,CAAC,aAAa,GAAG;oBACjB,cAAc,EAAE,CAAC;oBACjB,cAAc,EAAE,KAAK;iBACxB,CAAC;aACL;iBAAM;gBACH,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;gBAClC,IAAI,KAAK,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE;oBACpC,IAAI,CAAC,aAAa,CAAC,cAAc,GAAG,CAAC,CAAC;iBACzC;gBACD,IAAI,KAAK,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE;oBACpC,IAAI,CAAC,aAAa,CAAC,cAAc,GAAG,KAAK,CAAC;iBAC7C;aACJ;YACD,IAAI,CAAC,cAAc,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,sBAAsB,CAAC,GAAG,MAAM,CAAC,sBAAsB,GAAG,GAAG,CAAC;YAC5G,IAAI,CAAC,UAAU,GAAG,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC;YAC7C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YAEpB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAEtD,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;YAC3B,IAAI,CAAC,gBAAgB,CAACD,mBAAW,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5E,IAAI,CAAC,gBAAgB,CAACA,mBAAW,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1E,IAAI,CAAC,gBAAgB,CAACA,mBAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClE,IAAI,CAAC,gBAAgB,CAACA,mBAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACrE;QAEM,yBAAO,GAAd,UAAe,MAAqC,EAAE,UAAyB;YAC3E,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;YAC5B,IAAM,kBAAkB,GACpB,MAAM,KAAK,MAAM,CAAC,KAAK,KAAKC,mBAAW,CAAC,OAAO,IAAI,MAAM,CAAC,KAAK,KAAKA,mBAAW,CAAC,MAAM,CAAC,CAAC;YAC5F,IAAI,IAAI,CAAC,OAAO,IAAI,kBAAkB,EAAE;gBACpC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;oBAC5B,MAAM,GAAG;wBACL,GAAG,EAAE,MAAM;wBACX,UAAU,EAAE,UAAU;qBACzB,CAAC;iBACL;gBACD,IAAI,UAAU,EAAE;oBACZ,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;iBAClC;gBACD,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;gBAE1B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAC7B,IAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAC9C,eAAe,CAAC,eAAe,IAAI,eAAe,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;aAC9E;iBAAM;gBACH,OAAO,CAAC,KAAK,CAAC,uBAAgB,MAAM,GAAG,iBAAiB,GAAG,MAAM,CAAC,KAAK,GAAG,EAAE,CAAE,CAAC,CAAC;aACnF;SACJ;QACM,4BAAU,GAAjB;YACI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAGzB,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBACvB,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBACpC,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;aACrC;YACD,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC1B,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACvC,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;aACxC;SACJ;QAEM,2BAAS,GAAhB;YAAA,iBAsBC;YArBG,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBAChC,OAAO;aACV;YACD,IAAI,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE;gBAC7D,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;gBAC3B,OAAO;aACV;YACD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gBACvB,IAAM,iBAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAC9C,iBAAe,CAAC,gBAAgB,IAAI,iBAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;aAC9G;YACD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAE/B,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC9C,eAAe,CAAC,cAAc;gBAC1B,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAClG,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;gBAChC,KAAI,CAAC,SAAS,EAAE,CAAC;aACpB,EAAE,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;SACzC;QACM,yBAAO,GAAd,UACI,QAAsB,EACtB,IAAa,EACb,UAEsD,EACtD,GAAS;YAET,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;gBAAE,OAAO;YACnC,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;YAC1B,IAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;YACxC,IAAM,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YACvG,IAAI,SAAS,EAAE;gBACX,IAAI,MAAM,GAAwB;oBAC9B,KAAK,EAAE,KAAK;oBACZ,QAAQ,EAAE,YAAY,CAAC,YAAY,CAAC,QAAQ,CAAC;oBAC7C,IAAI,EAAE,IAAI;oBACV,UAAU,EAAE,UAAU;iBACzB,CAAC;gBACF,IAAI,GAAG;oBAAE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC7C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;gBAChC,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,IAAI,CAAC,gBAAgB,CAAC,cAAc,IAAI,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;gBACvG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACxB;SACJ;QACM,wBAAM,GAAb,UAAiB,QAAsB,EAAE,IAAQ;YAC7C,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;gBAAE,OAAO;YAEnC,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAC1C;gBACI,GAAG,EAAE,QAAQ;gBACb,IAAI,EAAE,IAAI;aACI,EAClB,IAAI,CAAC,UAAU,CAClB,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACxB;QACM,sBAAI,GAAX,UAAY,OAAqB;YAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC9B;QACM,wBAAM,GAAb,UACI,QAAsB,EACtB,OAA+G;YAE/G,IAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACtD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;gBAC5B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACzC;iBAAM;gBACH,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC3C;SACJ;QACM,0BAAQ,GAAf,UACI,QAAsB,EACtB,OAA+G;YAE/G,IAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACtD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,EAAE;gBAChC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aAC7C;iBAAM;gBACH,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC/C;SACJ;QACM,yBAAO,GAAd,UAAe,QAAsB,EAAE,eAAiC,EAAE,OAAa,EAAE,QAAkB;YACvG,IAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACtD,IAAI,QAA4B,CAAC;YACjC,IAAI,QAAQ,EAAE;gBACV,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;aAC5C;iBAAM;gBACH,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;aACxC;YACD,IAAI,QAAQ,EAAE;gBACV,IAAI,OAAO,SAAkB,CAAC;gBAC9B,IAAI,OAAO,SAAS,CAAC;gBACrB,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC3C,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACtB,OAAO,GAAG,KAAK,CAAC;oBAChB,IAAI,OAAO,OAAO,KAAK,UAAU,IAAI,OAAO,KAAK,eAAe,EAAE;wBAC9D,OAAO,GAAG,IAAI,CAAC;qBAClB;yBAAM,IACH,OAAO,OAAO,KAAK,QAAQ;wBAC3B,OAAO,CAAC,MAAM,KAAK,eAAe;yBACjC,CAAC,OAAO,IAAI,OAAO,KAAK,OAAO,CAAC,OAAO,CAAC,EAC3C;wBACE,OAAO,GAAG,IAAI,CAAC;qBAClB;oBACD,IAAI,OAAO,EAAE;wBACT,IAAI,CAAC,KAAK,QAAQ,CAAC,MAAM,EAAE;4BACvB,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;4BAC5C,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;yBAC3C;wBACD,QAAQ,CAAC,GAAG,EAAE,CAAC;qBAClB;iBACJ;aACJ;SACJ;QACM,4BAAU,GAAjB,UAAkB,QAAuB;YACrC,IAAI,QAAQ,EAAE;gBACV,IAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACtD,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;gBACjC,OAAO,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;aACxC;iBAAM;gBACH,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;gBAC1B,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;aACjC;SACJ;QAKS,8BAAY,GAAtB,UAAuB,IAAyB;YAC5C,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,OAAO;aACV;YACD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC1B,IAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,IAAI,EAAED,mBAAW,CAAC,aAAa,EAAE,CAAC,CAAC;YACjF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAClB,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;YACpC,IAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC;YACrD,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAC7D,IAAI,CAAC,gBAAgB,CAAC,YAAY,IAAI,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;SACtG;QAKS,gCAAc,GAAxB,UAAyB,IAAyB;YAC9C,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC;YAEvD,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC;SACxC;QAWS,4BAAU,GAApB,UAAqB,IAAyB;YAA9C,iBAqBC;YApBG,IAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC3C,IAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;YACxC,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE;gBAClD,OAAO;aACV;YACD,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC1B,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACvC,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;aACxC;YACD,IAAI,CAAC,gBAAgB,GAAG,UAAU,CAAC;gBAC/B,KAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;gBAClC,IAAM,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,EAAE,IAAI,EAAEA,mBAAW,CAAC,SAAS,EAAE,EAAE,KAAI,CAAC,UAAU,CAAC,CAAC;gBAC9F,KAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACxB,KAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC;gBAE5E,KAAI,CAAC,mBAAmB,GAAG,UAAU,CACjC,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAI,CAAC,EACnC,YAAY,CAAC,gBAAgB,CACzB,CAAC;aACZ,EAAE,YAAY,CAAC,iBAAiB,CAAQ,CAAC;SAC7C;QAIS,qCAAmB,GAA7B;YACI,IAAI,GAAG,GAAG,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACtD,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,EAAE;gBAC3B,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAQ,CAAC;aAC1F;iBAAM;gBACH,OAAO,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAC1C,IAAI,CAAC,UAAU,EAAE,CAAC;aACrB;SACJ;QAKS,yBAAO,GAAjB,UAAkB,IAAyB;YACvC,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,OAAO;aACV;YACD,IAAI,MAA2B,CAAC;YAChC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;gBAEtC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACzB,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,MAAM;oBAAE,OAAO;gBACpB,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aAC7C;iBAAM;gBACH,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;gBAEzB,IAAI,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;gBAC7C,IAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;gBACvD,IAAI,CAAC,QAAQ,EAAE;oBACX,QAAQ,GAAG,YAAY,CAAC;iBAC3B;qBAAM,IAAI,YAAY,EAAE;oBACrB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;iBAC5C;gBACD,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;gBACzC,IAAI,QAAQ,EAAE;oBACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACtC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;qBACvC;iBACJ;aACJ;YACD,IAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC9C,eAAe,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;SACpF;QAKS,yBAAO,GAAjB,UAAkB,IAAyB;YACvC,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;SACxF;QAIS,gCAAc,GAAxB;YACI,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;YAC5B,IAAM,aAAa,GAAG,MAAM,KAAK,MAAM,CAAC,KAAK,KAAKC,mBAAW,CAAC,UAAU,IAAI,MAAM,CAAC,KAAK,KAAKA,mBAAW,CAAC,IAAI,CAAC,CAAC;YAC/G,IAAI,IAAI,CAAC,OAAO,IAAI,aAAa,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACf;iBAAM;gBACH,OAAO,CAAC,KAAK,CACT,UACI,IAAI,CAAC,OAAO;sBACN,aAAa;0BACT,iBAAiB;0BACjB,2BAA2B;sBAC/B,qBAAqB,CAC7B,CACL,CAAC;gBACF,OAAO,KAAK,CAAC;aAChB;SACJ;QAKS,oCAAkB,GAA5B,UAA6B,KAAU;YACnC,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,IAAI,CAAC,cAAc,EAAE,CAAC;aACzB;iBAAM;gBACH,IAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBACtC,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;gBACpC,IAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;gBACxC,IAAI,YAAY,IAAI,UAAU,CAAC,YAAY,EAAE;oBACzC,IAAM,gBAAgB,GAAG,YAAY,CAAC,SAAS,CAAC;wBAC5C,IAAI,EAAED,mBAAW,CAAC,SAAS;wBAC3B,IAAI,EAAE,UAAU,CAAC,YAAY;qBAChC,CAAC,CAAC;oBACH,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;iBAC/B;qBAAM;oBACH,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,EAAE,CAAC;oBACjD,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;iBAC5D;aACJ;SACJ;QAKS,gCAAc,GAAxB,UAAyB,KAAU;YAC/B,IAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC3C,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;SACzE;QAKS,8BAAY,GAAtB,UAAuB,KAA6B;YAChD,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC9C,IAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC7D,IAAI,cAAc,EAAE;gBAChB,cAAc,CAAC,SAAS,CAAC,CAAC;aAC7B;iBAAM;gBACH,OAAO,CAAC,KAAK,CAAC,2CAAoC,SAAS,CAAC,IAAI,CAAE,CAAC,CAAC;aACvE;YACD,IAAI,SAAS,CAAC,QAAQ,EAAE;gBACpB,eAAe,CAAC,aAAa,IAAI,eAAe,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;aAC/F;YAED,IAAI,IAAI,CAAC,yBAAyB,EAAE;gBAChC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC;aACxF;SACJ;QAKS,iCAAe,GAAzB,UAA0B,KAAU;YAChC,IAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC9C,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACrC,IAAI,CAAC,SAAS,EAAE,CAAC;aACpB;iBAAM;gBACH,eAAe,CAAC,QAAQ,IAAI,eAAe,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;aACjF;SACJ;QAOS,6BAAW,GAArB,UAAsB,OAAyB,EAAE,SAA8B;YAC3E,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;gBAC/B,OAAO,CAAC,SAAS,CAAC,CAAC;aACtB;iBAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;gBACpC,OAAO,CAAC,MAAM;oBACV,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;aAC5G;SACJ;QAKS,gCAAc,GAAxB,UAAyB,IAAW;YAAX,qBAAA,EAAA,WAAW;YAChC,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC7B,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACrC,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;gBAC5B,IAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAC3C,YAAY,CAAC,cAAc,IAAI,YAAY,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;aAC1G;SACJ;QACL,cAAC;IAAD,CAAC,IAAA;IACD;QAAA;SAuCC;QArCG,sBAAW,6CAAY;iBAAvB;gBACI,OAAO,SAAS,CAAC;aACpB;;;WAAA;QACD,sBAAW,gDAAe;iBAA1B;gBACI,OAAO,IAAI,CAAC,aAAa,CAAC;aAC7B;;;WAAA;QACD,uCAAS,GAAT,UAAU,GAAuB,EAAE,SAAmB;YAClD,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;SAC9B;QACD,0CAAY,GAAZ,UAAa,QAAsB;YAC/B,OAAO,QAAe,CAAC;SAC1B;QACD,uCAAS,GAAT,UAAa,GAAmC,EAAE,SAAmB;YACjE,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAEA,mBAAW,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAmB,CAAC,CAAC;SACjF;QACD,uCAAS,GAAT,UAAU,IAAkB;YACxB,IAAM,UAAU,GAAwB,IAAI,CAAC,KAAK,CAAC,IAAc,CAAC,CAAC;YACnE,IAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC;YAEhC,IAAI,UAAU,CAAC,IAAI,KAAKA,mBAAW,CAAC,IAAI,EAAE;gBACtC,IAAM,GAAG,GAAkB,UAAU,CAAC,IAAI,CAAC;gBAC3C,OAAO;oBACH,GAAG,EAAE,GAAG,IAAI,GAAG,CAAC,GAAG;oBACnB,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,GAAG,CAAC,IAAI;oBACd,KAAK,EAAE,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK;iBAC3B,CAAC;aAC5B;iBAAM;gBACH,IAAI,OAAO,KAAKA,mBAAW,CAAC,SAAS,EAAE;oBACnC,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC;iBACxC;gBACD,OAAO;oBACH,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,UAAU,CAAC,IAAI;iBACD,CAAC;aAC5B;SACJ;QACL,0BAAC;IAAD,CAAC;;;;;;;;;;;;;;;;;;;"}